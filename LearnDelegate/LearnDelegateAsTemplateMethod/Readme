C#中类型一共归为五类：Object：根类【型】
   引用数据类型：引用类型变量里存的数据是对象的引用地址
类，用class关键字声明
接口
委托：【C#中常见委托、自定义委托】是一种类class
函数指针的升级版。可以按照一定得约束来指向某些目标方法，然后帮我们完成对这些方法的间接调用
C#中的常见委托Action()和Func()：委托重载了很多种，咱们根据咱们的形参列表选择适配的就行
无参函数的委托：Action()，也可以点进源码看一下，一样的。



记住，有个陷进就是，委托不是方法调用，比如例子中的calculator.Report，不能给Report方法加上()，加上()是不对的
然后调用方式肯定也有两种啦：就是用委托和不用委托，效果是一样的
不用委托：正常面向对象的方法调用呗，咋，静态方法和非静态方法的调用你不会？
用委托：action.invoke();也可以直接写成action();
泛型委托：

比如，Func,咱们从重载中挑选一个。

定义方式：

调用方式：

自定义委托：
格式：public delegate double 委托名Demo(double x, doublie y);
委托必须与所封装的方法保持“类型兼容”。【返回值的数据类型一致、参数列表在个数和数据类型上一致，参数名字不需要一模一样】

C#允许委托嵌套在目标类中，要注意，此时如果调用委托的代码在目标类中，那无所谓，按照原来委托的写法调用委托即可。如果在目标类之外，那么需要目标类.委托类名去实例化，然后再调用，因为人家委托就是个类呀，相当于一个内部类一个外部类呀，你调用就得注意点，目标类中调用可省外部目标类，其他类中调用就不能省略目标类了。上面例子中的委托和委托的目标方法所在类处于同一个级别：

委托在实际工作中如何用呢？
把委托当作参数传给另一个方法：
模板方法：使用指定的外部方法【这个方法一般有返回值】来产生结果，相当于填空题，空就用传进来的委托参数间接调用外部方法进行填补
回调方法：调用指定的外部方法，执行一些后续工作，相当于流水线，或者说发名片给你，说哪天你需要帮助打这个名片上的电话，你也可以接收很多名片哦
一切皆地址。
如何理解呢，可以理解为数据结构+算法就是咱们的程序，而数据结构就是来存储咱们的数据的，所以可以说数据（变量）+函数（算法）就相当于咱们的程序。再回过头来看，变量（数据）是以某个地址为起点的一段内存中所存储的值，而函数（算法）是以某个地址为起点的一段内存中所存储的一组机器语言指令。当时存在内存中的，位置大小不同罢了，所以才有了一切皆地址这一句话
直接调用和间接调用，最终调用效果一样
Java中彻底舍弃了指针，也没有与委托相对应的功能实体
值类型：值类型变量里存的是某种类型的数据
  结构体，用struct关键字声明，short、int、byte...这些都是
                         枚举，一个集合，用户只能从这个集合中选择值使用，用enum关键字声明